import java.util.* ;
import java.io.*; 
import java.util.ArrayList;
import java.util.Collections;

public class Solution 
{
	static void swap(int i,int ind, ArrayList<Integer> permutation){
		
		int temp = permutation.get(ind);
		permutation.set(ind,permutation.get(i));
		permutation.set(i,temp);
	}
	static void reverse(int i,int j,ArrayList<Integer> permutation){
		while(i<j){
			swap(i,j,permutation);
			i++;
			j--;
		}
	}
	public static ArrayList<Integer> nextPermutation(ArrayList<Integer> permutation) 
	{
		// Write your code here.
		int n = permutation.size();
		
		//algorithm starts
		//Step 1:find the break even point
		int ind = -1;
		for(int i=n-2;i>=0;i--){
			if(permutation.get(i) < permutation.get(i+1)){
				ind = i;
				break;
			}
		}
		if(ind == -1){
			reverse(0,n-1,permutation);
			return permutation;
		}
		//step 2: swap with the greater than ind and smaller than ind+1
		for(int i=n-1;i>ind;i--){
			if(permutation.get(i) > permutation.get(ind)){
				swap(i,ind,permutation);
				break;
			}
		}
		
		//step 3:arrange the remaining portion in ascending order (reversing is enough here since elements are in descending order)
		reverse(ind+1,n-1,permutation);
		
		return permutation;
	}
}
